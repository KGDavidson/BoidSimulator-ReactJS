{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["boids","canvasWidth","window","innerWidth","canvasHeight","innerHeight","Boid","ctx","x","y","r","special","this","speed","checkPercent","checkRadius","scale","separationAngVel","alignmentAngVel","cohesionAngVel","wallCheckAngVel","colour","randomBetween","bool","translate","rotate","beginPath","moveTo","lineTo","closePath","strokeStyle","lineWidth","stroke","fillStyle","fill","boid","toRadians","Math","cos","sin","angle","bottomWall","topWall","leftWall","rightWall","vector1","vector2","toDegrees","atan2","abs","setAngle","normaliseAngle","angleDiff","boidsNearX","boidsNearY","centre","sum","length","min","max","random","PI","list","reduce","a","b","App","canvasRef","useRef","useEffect","canvas","current","getContext","n","i","push","round","setSpecial","initialiseBoids","render","clearRect","width","height","j","distance","sqrt","pow","drawSpecialLine","alignment","separation","cohesion","draw","move","wallCheck","requestAnimationFrame","id","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d35d560.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useRef} from \"react\";\n\nconst canvasWidth = window.innerWidth;\nconst canvasHeight = window.innerHeight;\n\nconst boidCount = 150;\n\nconst boidScale = 1.5;\nconst boidCheckRadius = 100;\nconst boidCheckPercent = 0.7;\nconst boidSpeed = 7;\nconst boidAlignmentAngVel = 4;\nconst boidCohesionAngVel = 5;\nconst boidSeparationAngVel = 6;\nconst boidWallCheckAngVel = 3;\n\nclass Boid {\n    constructor(ctx, x, y, r, special) {\n        this.ctx = ctx;\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.speed = boidSpeed;\n        this.checkPercent = boidCheckPercent;\n        this.checkRadius = boidCheckRadius;\n        this.special = special;\n        this.scale = boidScale;\n        this.separationAngVel = boidSeparationAngVel;\n        this.alignmentAngVel = boidAlignmentAngVel;\n        this.cohesionAngVel = boidCohesionAngVel;\n        this.wallCheckAngVel = boidWallCheckAngVel;\n        this.colour = \"rgb(\" + randomBetween(111, 195) + \",\" + randomBetween(8, 34) + \",\" + randomBetween(63, 50) + \")\";\n        /*if (this.special) {\n            this.colour = \"#ffffff\";\n        }*/\n    }\n    setSpecial(bool) {\n        this.special = bool;\n    }\n    draw() {\n        this.ctx.translate(this.x, this.y);\n        this.ctx.rotate(this.r);\n        this.ctx.beginPath();\n        this.ctx.moveTo(25 / 2 * this.scale, 0);\n        this.ctx.lineTo(-10 / 2 * this.scale, -10 / 2 * this.scale);\n        this.ctx.lineTo(-5 / 2  * this.scale, 0);\n        this.ctx.lineTo(-10 / 2 * this.scale, 10 / 2 * this.scale);\n        this.ctx.closePath();\n        if (this.special) {\n            this.ctx.strokeStyle = \"#ffffff\";\n            this.ctx.lineWidth = 3;\n            this.ctx.stroke();\n        }\n        this.ctx.fillStyle = this.colour;\n        this.ctx.fill();\n        this.ctx.rotate(-this.r);\n        this.ctx.translate(-this.x, -this.y);\n    }\n    drawSpecialLine(boid) {\n        if (this.special) {\n            this.ctx.strokeStyle = \"#ffffff\";\n            this.ctx.lineWidth = 2;\n            this.ctx.beginPath();\n            this.ctx.moveTo(this.x, this.y);\n            this.ctx.lineTo(boid.x, boid.y);\n            this.ctx.stroke();\n            this.ctx.closePath();\n        }\n    }\n    move() {\n        this.r += toRadians(randomBetween(-2, 2));\n        this.x += this.speed * Math.cos(this.r);\n        this.y += this.speed * Math.sin(this.r);\n    }\n    normaliseAngle(angle) {\n        if (angle > 180) {\n            angle -= 360;\n        }\n\n        if (angle < -180) {\n            angle += 360;\n        }\n        return angle;\n    }\n    wallCheck() {\n        let bottomWall = this.y + this.checkRadius * 2 > canvasHeight;\n        let topWall = this.y - this.checkRadius * 2 < 0;\n\n        let leftWall = this.x - this.checkRadius * 2 < 0;\n        let rightWall = this.x + this.checkRadius * 2 > canvasWidth;\n\n\n        if (bottomWall | topWall) {\n            let vector1 = [Math.cos(this.r), Math.sin(this.r)];\n            let vector2 = [0, 1];\n            let angle = toDegrees(Math.atan2(vector2[1], vector2[0]) - Math.atan2(vector1[1], vector1[0]));\n\n            if (angle > 180) {\n                angle -= 360\n            }\n\n            if (angle < -180) {\n                angle += 360\n            }\n\n            if (Math.abs(angle) < 180 * this.checkPercent){\n                let setAngle = angle;\n                if (topWall){\n                    setAngle = -angle;\n                }\n                this.r -= Math.abs(setAngle) / setAngle * toRadians(this.wallCheckAngVel);\n            }\n        }\n\n        \n        if (rightWall | leftWall) {\n            let vector1 = [Math.cos(this.r), Math.sin(this.r)];\n            let vector2 = [1, 0];\n            let angle = toDegrees(Math.atan2(vector2[1], vector2[0]) - Math.atan2(vector1[1], vector1[0]));\n\n            if (angle > 180) {\n                angle -= 360\n            }\n\n            if (angle < -180) {\n                angle += 360\n            }\n\n            if (Math.abs(angle) < 180 * this.checkPercent){\n                let setAngle = angle;\n                if (leftWall){\n                    setAngle = -angle;\n                }\n                this.r -= Math.abs(setAngle) / setAngle * toRadians(this.wallCheckAngVel);\n            }\n        }\n\n        if (this.x < 0) {\n            this.x += canvasWidth;\n        }\n        \n        if (this.x > canvasWidth) {\n            this.x -= canvasWidth;\n        }\n\n        \n        if (this.y < 0) {\n            this.y += canvasHeight;\n        }\n        \n        if (this.y > canvasHeight) {\n            this.y -= canvasHeight;\n        }\n    }\n    separation(boid) {\n        let vector1 = [Math.cos(this.r), Math.sin(this.r)];\n        let vector2 = [boid.x - this.x, boid.y - this.y];\n        let angle = toDegrees(Math.atan2(vector2[1], vector2[0]) - Math.atan2(vector1[1], vector1[0]));\n\n        angle = this.normaliseAngle(angle);\n\n        if (Math.abs(angle) < 180 * this.checkPercent){\n            this.r -= Math.abs(angle) / angle * toRadians(this.separationAngVel);\n        }\n    }\n    alignment(boid) {\n        let angleDiff = boid.r - this.r;\n        this.r += Math.abs(angleDiff) / angleDiff * toRadians(this.alignmentAngVel);\n    }\n    cohesion(boidsNearX, boidsNearY) {\n        let centre = [sum(boidsNearX) / boidsNearX.length, sum(boidsNearY) / boidsNearY.length];\n        \n        let vector1 = [Math.cos(this.r), Math.sin(this.r)];\n        let vector2 = [centre[0] - this.x, centre[1] - this.y];\n        let angle = toDegrees(Math.atan2(vector2[1], vector2[0]) - Math.atan2(vector1[1], vector1[0]));\n\n        angle = this.normaliseAngle(angle);\n\n        if (Math.abs(angle) < 180 * this.checkPercent){\n            this.r += Math.abs(angle) / angle * toRadians(this.cohesionAngVel);\n        }\n    }\n}\n\nlet boids;\n\nfunction randomBetween(min, max) {\n    return min + Math.random() * (max - min)\n}\n\nfunction toRadians (angle) {\n    return angle * Math.PI / 180;\n}\n\nfunction toDegrees (angle) {\n    return angle / Math.PI * 180;\n}\n\nfunction sum(list) {\n    return list.reduce((a, b) => a + b, 0)\n}\n\n\nfunction initialiseBoids(ctx, n) {\n    const boids = []\n    for (var i = 0; i < n; i ++) {\n        boids.push(new Boid(ctx, randomBetween(100, canvasWidth - 100), randomBetween(100, canvasHeight - 100), toRadians(randomBetween(0, 360)), false));\n    }\n    boids[Math.round(randomBetween(0, boids.length))].setSpecial(true);\n    return boids;\n}\n\nfunction App() {\n    const canvasRef = useRef(null);\n\n    useEffect(()=>{\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        boids = initialiseBoids(ctx, boidCount);\n\n        const render = ()=>{\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            for (var i = 0; i < boids.length; i++) {\n                let boidsNearX = [];\n                let boidsNearY = [];\n                for (var j = 0; j < boids.length; j++) {\n                    let distance = Math.sqrt(Math.pow(boids[i].x - boids[j].x, 2) + Math.pow(boids[i].y - boids[j].y, 2))\n                    if (boids[i] !== boids[j] && Math.abs(distance) < boids[i].checkRadius) {\n                        boids[i].drawSpecialLine(boids[j]);\n                        boidsNearX.push(boids[j].x);\n                        boidsNearY.push(boids[j].y);\n                        boids[i].alignment(boids[j]);\n                        boids[i].separation(boids[j]);\n                    }\n                }\n                boids[i].cohesion(boidsNearX, boidsNearY);\n                boids[i].draw();\n                boids[i].move();\n                boids[i].wallCheck();\n            }\n\n            requestAnimationFrame(render);\n        }\n        render();\n    }, []);\n\n    return (<canvas id=\"canvas\" ref={canvasRef} width={canvasWidth} height={canvasHeight}></canvas>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}